<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="urn:hl7-org:elm-modelinfo:r1" targetNamespace="urn:hl7-org:elm-modelinfo:r1" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="modelInfo" type="ModelInfo">
		<xs:annotation>
			<xs:documentation>The modelInfo element defines metadata associated with a particular model to allow it to be used by CQL.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ModelInfo">
		<xs:annotation>
			<xs:documentation>The ModelInfo type defines the metadata associated with a particular model to enable it to be used by the CQL translator. Note that none of the information specified here is required, it just enables some convenient shorthands within the language.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="requiredModelInfo" type="ModelSpecifier" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="typeInfo" type="TypeInfo" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="conversionInfo" type="ConversionInfo" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The name attribute specifies the name of the data model. This value is the same as the model identifier used in using definitions and type specifiers within CQL.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="version" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The version attribute specifies the version of the data model. If specified, this value is the same as the version used in using definitions within CQL.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="url" type="xs:anyURI" use="required">
			<xs:annotation>
				<xs:documentation>The url attribute specifies the xml namespace associated with the model, and is used by the CQL translator to establish the url used to reference types from the model schema within an ELM document.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="schemaLocation" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The schemaLocation attribute is used by the CQL translator to output the schemaLocation of the xsd for the data model in the resulting ELM document.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="targetQualifier" type="xs:QName" use="optional">
			<xs:annotation>
				<xs:documentation>The targetQualifier attribute is used to specify the namespace qualifier that should be used when referencing types of the model within the ELM document.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="patientClassName" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The patientClassName attribute specifies the name of the Patient class within the model.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="patientClassIdentifier" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The patientClassIdentifier attribute specifies a unique name for the Patient class that may be independent of the name. In FHIR, this corresponds to the Patient profile identifier.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="patientBirthDatePropertyName" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The patientBirthDatePropertyName attribute specifies the name of the birthdate property on the Patient model.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="caseSensitive" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>The isCaseSensitive attribute indicates whether the identifiers used by this model should be resolved case-sensitively. If the attribute is true, references to identifiers in this model must match by case.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="strictRetrieveTyping" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>The strictRetrieveTyping attribute indicates whether or not retrieve expressions against the model should be semantically validated. If this attribute is not present or false, code and date range filters within the retrieve are not type validated, allowing the data access layer to perform late binding of content within the retrieve. If the attribute is true, code and date range filters within the retrieve are type validated.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ClassInfoElement">
		<xs:sequence>
			<xs:element name="typeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="type" type="xs:string" use="optional"/>
		<xs:attribute name="prohibited" type="xs:boolean" use="optional"/>
		<xs:attribute name="oneBased" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates that the starting index for a list-valued element is one. By default, lists are zero-based.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ClassInfo">
		<xs:annotation>
			<xs:documentation>The ClassInfo type models information associated with a single class in the data model.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TypeInfo">
				<xs:sequence>
					<xs:element name="element" type="ClassInfoElement" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="name" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>The name attribute specifies the name of the type within the data model. This corresponds to the name of the class within the class model, or the name of the type in the case of an xsd. In FHIR, this corresponds to the name of the resource.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="identifier" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>The identifier attribute specifies a unique name for the class that may be independent of the name. In FHIR, this corresponds to the profile identifier.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="label" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>The label attribute specifies the name of the class as it is referenced from CQL. This is a user-friendly identifier for the class that can be used within CQL as an alternative way to reference the class.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="retrievable" type="xs:boolean" use="optional" default="false">
					<xs:annotation>
						<xs:documentation>The retrievable attribute specifies whether the class can be used within a retrieve statement. This flag is intended to allow the implementation to control whether or not the class can be used as a data access point for the data model.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="primaryCodePath" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>The primaryCodePath attribute specifies the path relative to the class that should be used to perform code filtering when a retrieve does not specify a code path.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TypeInfo" abstract="true">
		<xs:sequence>
			<xs:element name="baseTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="baseType" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="SimpleTypeInfo">
		<xs:complexContent>
			<xs:extension base="TypeInfo">
				<xs:attribute name="name" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>Name is the unqualified name of the type within this model.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IntervalTypeInfo">
		<xs:complexContent>
			<xs:extension base="TypeInfo">
				<xs:sequence>
					<xs:element name="pointTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="pointType" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ListTypeInfo">
		<xs:complexContent>
			<xs:extension base="TypeInfo">
				<xs:sequence>
					<xs:element name="elementTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="elementType" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TupleTypeInfoElement">
		<xs:sequence>
			<xs:element name="typeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="type" type="xs:string" use="optional"/>
		<xs:attribute name="prohibited" type="xs:boolean" use="optional"/>
		<xs:attribute name="oneBased" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates that the starting index for a list-valued element is one. By default, lists are zero-based.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="TupleTypeInfo">
		<xs:complexContent>
			<xs:extension base="TypeInfo">
				<xs:sequence>
					<xs:element name="element" type="TupleTypeInfoElement" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ProfileInfo">
		<xs:complexContent>
			<xs:extension base="ClassInfo"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ConversionInfo">
		<xs:sequence>
			<xs:element name="fromTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
			<xs:element name="toTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="functionName" type="xs:string" use="required"/>
		<xs:attribute name="fromType" type="xs:string" use="optional"/>
		<xs:attribute name="toType" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ChoiceTypeInfo">
		<xs:complexContent>
			<xs:extension base="TypeInfo">
				<xs:sequence>
					<xs:element name="type" type="TypeSpecifier" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ModelSpecifier">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="version" type="xs:string" use="optional"/>
	</xs:complexType>
	<!-- NOTE: TypeSpecifier purposely does not support tuple types, tuple types must be named in order to be referenced -->
	<xs:complexType name="TypeSpecifier" abstract="true"/>
	<xs:complexType name="NamedTypeSpecifier">
		<xs:complexContent>
			<xs:extension base="TypeSpecifier">
				<xs:attribute name="modelName" type="xs:string" use="optional"/>
				<xs:attribute name="name" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ListTypeSpecifier">
		<xs:complexContent>
			<xs:extension base="TypeSpecifier">
				<xs:sequence>
					<xs:element name="elementTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="elementType" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IntervalTypeSpecifier">
		<xs:complexContent>
			<xs:extension base="TypeSpecifier">
				<xs:sequence>
					<xs:element name="pointTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="pointType" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ChoiceTypeSpecifier">
		<xs:complexContent>
			<xs:extension base="TypeSpecifier">
				<xs:sequence>
					<xs:element name="choice" type="TypeSpecifier" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
