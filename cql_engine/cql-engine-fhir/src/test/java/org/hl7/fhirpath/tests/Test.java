//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.12.14 at 03:32:24 PM MST 
//


package org.hl7.fhirpath.tests;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Test complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Test"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="expression" type="{http://hl7.org/fhirpath/tests}Expression"/&gt;
 *         &lt;element name="output" type="{http://hl7.org/fhirpath/tests}Output" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="inputfile" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="predicate" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Test", namespace = "http://hl7.org/fhirpath/tests", propOrder = {
    "expression",
    "output"
})
public class Test
    implements Equals, HashCode, ToString
{

    @XmlElement(namespace = "http://hl7.org/fhirpath/tests", required = true)
    protected Expression expression;
    @XmlElement(namespace = "http://hl7.org/fhirpath/tests")
    protected List<Output> output;
    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "inputfile")
    protected String inputfile;
    @XmlAttribute(name = "predicate")
    protected Boolean predicate;

    /**
     * Gets the value of the expression property.
     * 
     * @return
     *     possible object is
     *     {@link Expression }
     *     
     */
    public Expression getExpression() {
        return expression;
    }

    /**
     * Sets the value of the expression property.
     * 
     * @param value
     *     allowed object is
     *     {@link Expression }
     *     
     */
    public void setExpression(Expression value) {
        this.expression = value;
    }

    /**
     * Gets the value of the output property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the output property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOutput().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Output }
     * 
     * 
     */
    public List<Output> getOutput() {
        if (output == null) {
            output = new ArrayList<Output>();
        }
        return this.output;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the inputfile property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInputfile() {
        return inputfile;
    }

    /**
     * Sets the value of the inputfile property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInputfile(String value) {
        this.inputfile = value;
    }

    /**
     * Gets the value of the predicate property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isPredicate() {
        return predicate;
    }

    /**
     * Sets the value of the predicate property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setPredicate(Boolean value) {
        this.predicate = value;
    }

    public Test withExpression(Expression value) {
        setExpression(value);
        return this;
    }

    public Test withOutput(Output... values) {
        if (values!= null) {
            for (Output value: values) {
                getOutput().add(value);
            }
        }
        return this;
    }

    public Test withOutput(Collection<Output> values) {
        if (values!= null) {
            getOutput().addAll(values);
        }
        return this;
    }

    public Test withName(String value) {
        setName(value);
        return this;
    }

    public Test withInputfile(String value) {
        setInputfile(value);
        return this;
    }

    public Test withPredicate(Boolean value) {
        setPredicate(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Test)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Test that = ((Test) object);
        {
            Expression lhsExpression;
            lhsExpression = this.getExpression();
            Expression rhsExpression;
            rhsExpression = that.getExpression();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "expression", lhsExpression), LocatorUtils.property(thatLocator, "expression", rhsExpression), lhsExpression, rhsExpression)) {
                return false;
            }
        }
        {
            List<Output> lhsOutput;
            lhsOutput = (((this.output!= null)&&(!this.output.isEmpty()))?this.getOutput():null);
            List<Output> rhsOutput;
            rhsOutput = (((that.output!= null)&&(!that.output.isEmpty()))?that.getOutput():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "output", lhsOutput), LocatorUtils.property(thatLocator, "output", rhsOutput), lhsOutput, rhsOutput)) {
                return false;
            }
        }
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsInputfile;
            lhsInputfile = this.getInputfile();
            String rhsInputfile;
            rhsInputfile = that.getInputfile();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "inputfile", lhsInputfile), LocatorUtils.property(thatLocator, "inputfile", rhsInputfile), lhsInputfile, rhsInputfile)) {
                return false;
            }
        }
        {
            Boolean lhsPredicate;
            lhsPredicate = this.isPredicate();
            Boolean rhsPredicate;
            rhsPredicate = that.isPredicate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "predicate", lhsPredicate), LocatorUtils.property(thatLocator, "predicate", rhsPredicate), lhsPredicate, rhsPredicate)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Expression theExpression;
            theExpression = this.getExpression();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expression", theExpression), currentHashCode, theExpression);
        }
        {
            List<Output> theOutput;
            theOutput = (((this.output!= null)&&(!this.output.isEmpty()))?this.getOutput():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "output", theOutput), currentHashCode, theOutput);
        }
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theInputfile;
            theInputfile = this.getInputfile();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "inputfile", theInputfile), currentHashCode, theInputfile);
        }
        {
            Boolean thePredicate;
            thePredicate = this.isPredicate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "predicate", thePredicate), currentHashCode, thePredicate);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Expression theExpression;
            theExpression = this.getExpression();
            strategy.appendField(locator, this, "expression", buffer, theExpression);
        }
        {
            List<Output> theOutput;
            theOutput = (((this.output!= null)&&(!this.output.isEmpty()))?this.getOutput():null);
            strategy.appendField(locator, this, "output", buffer, theOutput);
        }
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            String theInputfile;
            theInputfile = this.getInputfile();
            strategy.appendField(locator, this, "inputfile", buffer, theInputfile);
        }
        {
            Boolean thePredicate;
            thePredicate = this.isPredicate();
            strategy.appendField(locator, this, "predicate", buffer, thePredicate);
        }
        return buffer;
    }

}
